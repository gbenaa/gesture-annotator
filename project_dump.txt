
===== backend/app.py =====
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from models import db_session, Image, GestureInstance, Gesture
from sqlalchemy.exc import SQLAlchemyError
import os
from werkzeug.utils import secure_filename

app = Flask(__name__)
CORS(app)

UPLOAD_FOLDER = os.path.join(os.path.dirname(__file__), 'uploads')
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

@app.route("/", methods=["GET"])
def health_check():
    return jsonify({"status": "ok"}), 200

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        app.logger.error("No file part in request.")
        return jsonify({'error': 'No file uploaded'}), 400

    file = request.files['file']
    if file.filename == '':
        app.logger.error("Empty filename received.")
        return jsonify({'error': 'Empty filename'}), 400

    filename = secure_filename(file.filename)
    file_path = os.path.join(UPLOAD_FOLDER, filename)
    file.save(file_path)
    app.logger.info(f"File saved to {file_path}")

    new_image = Image(filename=filename, source="", location="")
    try:
        db_session.add(new_image)
        db_session.commit()
        app.logger.info(f"Image record created with id {new_image.id}")
        return jsonify({'message': 'File uploaded', 'image_id': new_image.id}), 200
    except SQLAlchemyError as e:
        db_session.rollback()
        app.logger.error(f"Database error: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/annotate', methods=['POST'])
def annotate():
    data = request.get_json()
    if data is None:
        app.logger.error("No JSON received.")
        return jsonify({'error': 'No JSON received'}), 400

    image_id = data.get('image_id')
    gesture_id = data.get('gesture_id')
    region_coordinates = data.get('region_coordinates')
    notes = data.get('notes', '')

    if not image_id or not region_coordinates:
        app.logger.error("Missing required fields.")
        return jsonify({'error': 'Missing required fields'}), 400

    # Validate gesture_id if provided
    if gesture_id is not None:
        gesture = db_session.query(Gesture).filter_by(id=gesture_id).first()
        if not gesture:
            app.logger.error(f"Invalid gesture_id: {gesture_id}")
            return jsonify({'error': 'Invalid gesture_id'}), 400

    new_instance = GestureInstance(
        image_id=image_id,
        gesture_id=gesture_id,
        region_coordinates=region_coordinates,
        cropped_image_path="",
        notes=notes
    )
    try:
        db_session.add(new_instance)
        db_session.commit()
        app.logger.info(f"Annotation saved with id {new_instance.id}")
        return jsonify({'message': 'Annotation saved', 'gesture_instance_id': new_instance.id}), 200
    except SQLAlchemyError as e:
        db_session.rollback()
        app.logger.error(f"Database error: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/gestures', methods=['GET'])
def get_gestures():
    try:
        gestures = db_session.query(Gesture).all()
        gesture_list = [
            {"id": gesture.id, "name": gesture.name, "description": gesture.description}
            for gesture in gestures
        ]
        return jsonify(gesture_list), 200
    except SQLAlchemyError as e:
        app.logger.error(f"Database error: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/uploads/<path:filename>')
def uploaded_file(filename):
    return send_from_directory(UPLOAD_FOLDER, filename)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

===== backend/models.py =====
from sqlalchemy import Column, Integer, String, Text, TIMESTAMP, ForeignKey, JSON, create_engine
from sqlalchemy.orm import declarative_base, sessionmaker, relationship
from sqlalchemy.sql import func
from pgvector.sqlalchemy import Vector
import os

DATABASE_URL = os.environ.get("DATABASE_URL")

Base = declarative_base()

class Image(Base):
    __tablename__ = 'images'
    id = Column(Integer, primary_key=True)
    filename = Column(String, nullable=False)
    source = Column(String)
    location = Column(String)
    upload_timestamp = Column(TIMESTAMP, server_default=func.now())

    gesture_instances = relationship("GestureInstance", back_populates="image")

class Gesture(Base):
    __tablename__ = 'gestures'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    description = Column(Text)

    gesture_instances = relationship("GestureInstance", back_populates="gesture")

class GestureInstance(Base):
    __tablename__ = 'gesture_instances'
    id = Column(Integer, primary_key=True)
    image_id = Column(Integer, ForeignKey('images.id'))
    gesture_id = Column(Integer, ForeignKey('gestures.id'), nullable=True)
    region_coordinates = Column(JSON, nullable=False)
    cropped_image_path = Column(Text)
    notes = Column(Text)

    image = relationship("Image", back_populates="gesture_instances")
    gesture = relationship("Gesture", back_populates="gesture_instances")

class ClassificationSystem(Base):
    __tablename__ = 'classification_systems'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    description = Column(Text)

class ClassificationSystemGesture(Base):
    __tablename__ = 'classification_system_gestures'
    id = Column(Integer, primary_key=True)
    classification_system_id = Column(Integer, ForeignKey('classification_systems.id'))
    gesture_id = Column(Integer, ForeignKey('gestures.id'))
    label = Column(Text)

# Database setup
engine = create_engine(DATABASE_URL, echo=True)
SessionLocal = sessionmaker(bind=engine)
db_session = SessionLocal()

===== backend/requirements.txt =====
blinker==1.9.0
click==8.2.1
Flask==3.1.1
flask-cors==6.0.1
greenlet==3.2.3
itsdangerous==2.2.0
Jinja2==3.1.6
MarkupSafe==3.0.2
numpy==2.2.6
pgvector==0.4.1
pillow==11.3.0
psycopg2-binary==2.9.10
SQLAlchemy==2.0.41
typing_extensions==4.14.0
Werkzeug==3.1.3

===== frontend/src/App.jsx =====
import React, { useState, useRef, useEffect } from 'react';
import { Stage, Layer, Rect, Image as KonvaImage } from 'react-konva';
import axios from 'axios';

function App() {
    const [image, setImage] = useState(null);
    const [imageId, setImageId] = useState(null);
    const [rect, setRect] = useState(null);
    const [notes, setNotes] = useState("");
    const [uploaded, setUploaded] = useState(false);
    const [gestures, setGestures] = useState([]);
    const [selectedGestureId, setSelectedGestureId] = useState("");

    const stageRef = useRef();

    useEffect(() => {
        const fetchGestures = async () => {
            try {
                const res = await axios.get('/gestures');
                if (Array.isArray(res.data)) {
                    setGestures(res.data);
                } else {
                    console.error("Unexpected gestures response:", res.data);
                    setGestures([]);
                }
            } catch (err) {
                console.error("Failed to fetch gestures. Ensure the /gestures endpoint exists on your backend.", err);
                setGestures([]);
            }
        };
        fetchGestures();
    }, []);

    const handleFile = async (e) => {
        const file = e.target.files[0];
        const formData = new FormData();
        formData.append('file', file);
        try {
            const res = await axios.post('/upload', formData);
            setImageId(res.data.image_id);
            const img = new window.Image();
            img.src = URL.createObjectURL(file);
            img.onload = () => setImage(img);
            setUploaded(true);
        } catch (err) {
            alert("Upload failed: " + err);
        }
    };

    const handleMouseDown = (e) => {
        if (!uploaded) return;
        const { x, y } = e.target.getStage().getPointerPosition();
        setRect({ x, y, width: 0, height: 0 });
    };

    const handleMouseMove = (e) => {
        if (!rect) return;
        const { x, y } = e.target.getStage().getPointerPosition();
        setRect(prev => ({
            ...prev,
            width: x - prev.x,
            height: y - prev.y
        }));
    };

    const handleMouseUp = () => {
        // Optional: constrain rect to positive width/height
    };

    const handleSave = async () => {
        if (!imageId || !rect) {
            alert("Please upload an image and draw a rectangle first.");
            return;
        }
        if (!selectedGestureId) {
            alert("Please select a gesture before saving.");
            return;
        }

        const payload = {
            image_id: imageId,
            gesture_id: selectedGestureId,
            region_coordinates: rect,
            notes: notes
        };

        console.log("Submitting payload:", JSON.stringify(payload));

        try {
            const res = await axios.post('/annotate', payload);
            alert("Annotation saved: " + JSON.stringify(res.data));
        } catch (err) {
            alert("Save failed: " + err);
        }
    };

    return (
        <div style={{ padding: '20px' }}>
            <h2>Gesture Annotator</h2>
            <input type="file" accept="image/*" onChange={handleFile} />
            <br />
            <Stage
                width={600}
                height={400}
                onMouseDown={handleMouseDown}
                onMouseMove={handleMouseMove}
                onMouseUp={handleMouseUp}
                ref={stageRef}
                style={{ border: '1px solid #ddd', marginTop: '10px' }}
            >
                <Layer>
                    {image && (
                        <KonvaImage
                            image={image}
                            width={600}
                            height={400}
                        />
                    )}
                    {rect && (
                        <Rect
                            x={rect.x}
                            y={rect.y}
                            width={rect.width}
                            height={rect.height}
                            stroke="red"
                            strokeWidth={2}
                        />
                    )}
                </Layer>
            </Stage>

            <textarea
                placeholder="Notes"
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                style={{ display: 'block', marginTop: '10px', width: '600px' }}
            />

            <select
                value={selectedGestureId}
                onChange={(e) => setSelectedGestureId(e.target.value)}
                style={{ marginTop: '10px', width: '600px', padding: '5px' }}
            >
                <option value="">Select Gesture</option>
                {gestures.map((gesture) => (
                    <option key={gesture.id} value={gesture.id}>
                        {gesture.name}
                    </option>
                ))}
            </select>

            <button onClick={handleSave} style={{ marginTop: '10px' }}>
                Save Annotation
            </button>
        </div>
    );
}

export default App;

===== frontend/vite.config.js =====
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
    plugins: [react()],
    server: {
        proxy: {
            '/upload': 'http://127.0.0.1:5000',
            '/annotate': 'http://127.0.0.1:5000',
            '/gestures': 'http://127.0.0.1:5000',   // <--- Add this line if missing
        }
    }
});

===== frontend/package.json =====
{
  "name": "gesture-annotator-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.10.0",
    "konva": "^9.3.20",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-konva": "^19.0.6"
  },
  "devDependencies": {
    "@eslint/js": "^9.29.0",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.5.2",
    "eslint": "^9.29.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.2.0",
    "vite": "^7.0.0"
  }
}

===== report_backend/app.py =====
from flask import Flask, jsonify, send_from_directory
from flask_cors import CORS
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import Base, Image, GestureInstance, Gesture
import os

app = Flask(__name__)
CORS(app)

# Database setup
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql+psycopg2://annotator:password@localhost/gesture_db')
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()

@app.route('/report/api/images', methods=['GET'])
def get_images():
    try:
        images = session.query(Image).all()
        data = []
        for img in images:
            gesture_instances = session.query(GestureInstance).filter_by(image_id=img.id).all()
            instances_data = []
            for inst in gesture_instances:
                gesture = session.query(Gesture).filter_by(id=inst.gesture_id).first()
                instances_data.append({
                    'id': inst.id,
                    'region_coordinates': inst.region_coordinates,
                    'notes': inst.notes,
                    'gesture': gesture.name if gesture else None,
                    'gesture_id': inst.gesture_id
                })
            data.append({
                'id': img.id,
                'filename': img.filename,
                'upload_timestamp': img.upload_timestamp.isoformat() if img.upload_timestamp else None,
                'gesture_instances': instances_data
            })
        return jsonify(data), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/uploads/<path:filename>')
def serve_uploaded_file(filename):
    uploads_dir = os.path.join(os.path.dirname(__file__), '..', 'backend', 'uploads')
    return send_from_directory(uploads_dir, filename)

@app.route('/')
def health_check():
    return jsonify({'status': 'report backend running'}), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=True)

===== report_backend/models.py =====
from sqlalchemy import Column, Integer, String, Text, TIMESTAMP, ForeignKey, JSON, create_engine
from sqlalchemy.orm import declarative_base, sessionmaker, relationship
from sqlalchemy.sql import func
from pgvector.sqlalchemy import Vector
import os

DATABASE_URL = os.environ.get("DATABASE_URL")

Base = declarative_base()

class Image(Base):
    __tablename__ = 'images'
    id = Column(Integer, primary_key=True)
    filename = Column(String, nullable=False)
    source = Column(String)
    location = Column(String)
    upload_timestamp = Column(TIMESTAMP, server_default=func.now())

    gesture_instances = relationship("GestureInstance", back_populates="image")

class Gesture(Base):
    __tablename__ = 'gestures'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    description = Column(Text)

    gesture_instances = relationship("GestureInstance", back_populates="gesture")

class GestureInstance(Base):
    __tablename__ = 'gesture_instances'
    id = Column(Integer, primary_key=True)
    image_id = Column(Integer, ForeignKey('images.id'))
    gesture_id = Column(Integer, ForeignKey('gestures.id'), nullable=True)
    region_coordinates = Column(JSON, nullable=False)
    cropped_image_path = Column(Text)
    notes = Column(Text)

    image = relationship("Image", back_populates="gesture_instances")
    gesture = relationship("Gesture", back_populates="gesture_instances")

class ClassificationSystem(Base):
    __tablename__ = 'classification_systems'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    description = Column(Text)

class ClassificationSystemGesture(Base):
    __tablename__ = 'classification_system_gestures'
    id = Column(Integer, primary_key=True)
    classification_system_id = Column(Integer, ForeignKey('classification_systems.id'))
    gesture_id = Column(Integer, ForeignKey('gestures.id'))
    label = Column(Text)

# Database setup
engine = create_engine(DATABASE_URL, echo=True)
SessionLocal = sessionmaker(bind=engine)
db_session = SessionLocal()

===== report_backend/requirements.txt (MISSING) =====

===== run_all.sh =====
#!/bin/bash
set -e

echo "Stopping any existing node and python processes..."
pkill -f "python3 app.py" || true
pkill -f "npm run dev" || true

# Start backend
echo "Starting backend..."
cd ~/gesture-annotator-repo/backend
. ../venv/bin/activate
nohup python3 app.py > backend.log 2>&1 &
BACKEND_PID=$!
echo "Backend running with PID $BACKEND_PID"

# Start report_backend
echo "Starting report backend..."
cd ~/gesture-annotator-repo/report_backend
. ../venv/bin/activate
nohup python3 app.py > report_backend.log 2>&1 &
REPORT_BACKEND_PID=$!
echo "Report backend running with PID $REPORT_BACKEND_PID"

# Start frontend
echo "Starting frontend..."
cd ~/gesture-annotator-repo/frontend
nohup npm run dev -- --host 0.0.0.0 --port 5173 > frontend.log 2>&1 &
FRONTEND_PID=$!
echo "Frontend running with PID $FRONTEND_PID"

# Start report_frontend
echo "Starting report frontend..."
cd ~/gesture-annotator-repo/report_frontend
nohup npm run dev -- --host 0.0.0.0 --port 5174 > report_frontend.log 2>&1 &
REPORT_FRONTEND_PID=$!
echo "Report frontend running with PID $REPORT_FRONTEND_PID"

echo "All services started."
echo "Press Ctrl+C to stop all services."

# Wait to keep script running and allow Ctrl+C
trap "echo 'Stopping all services...'; kill $BACKEND_PID $REPORT_BACKEND_PID $FRONTEND_PID $REPORT_FRONTEND_PID; exit 0" SIGINT SIGTERM

# Keep the script alive
while true; do sleep 10; done
